import {
  __commonJS
} from "./chunk-GFT2G5UO.js";

// node_modules/ace-builds/src-min-noconflict/ext-language_tools.js
var require_ext_language_tools = __commonJS({
  "node_modules/ace-builds/src-min-noconflict/ext-language_tools.js"(exports, module) {
    ace.define("ace/snippets", ["require", "exports", "module", "ace/lib/dom", "ace/lib/oop", "ace/lib/event_emitter", "ace/lib/lang", "ace/range", "ace/range_list", "ace/keyboard/hash_handler", "ace/tokenizer", "ace/clipboard", "ace/editor"], function(e, t, n) {
      "use strict";
      function p(e2) {
        var t2 = (/* @__PURE__ */ new Date()).toLocaleString("en-us", e2);
        return t2.length == 1 ? "0" + t2 : t2;
      }
      var r = e("./lib/dom"), i = e("./lib/oop"), s = e("./lib/event_emitter").EventEmitter, o = e("./lib/lang"), u = e("./range").Range, a = e("./range_list").RangeList, f = e("./keyboard/hash_handler").HashHandler, l = e("./tokenizer").Tokenizer, c = e("./clipboard"), h = { CURRENT_WORD: function(e2) {
        return e2.session.getTextRange(e2.session.getWordRange());
      }, SELECTION: function(e2, t2, n2) {
        var r2 = e2.session.getTextRange();
        return n2 ? r2.replace(/\n\r?([ \t]*\S)/g, "\n" + n2 + "$1") : r2;
      }, CURRENT_LINE: function(e2) {
        return e2.session.getLine(e2.getCursorPosition().row);
      }, PREV_LINE: function(e2) {
        return e2.session.getLine(e2.getCursorPosition().row - 1);
      }, LINE_INDEX: function(e2) {
        return e2.getCursorPosition().row;
      }, LINE_NUMBER: function(e2) {
        return e2.getCursorPosition().row + 1;
      }, SOFT_TABS: function(e2) {
        return e2.session.getUseSoftTabs() ? "YES" : "NO";
      }, TAB_SIZE: function(e2) {
        return e2.session.getTabSize();
      }, CLIPBOARD: function(e2) {
        return c.getText && c.getText();
      }, FILENAME: function(e2) {
        return /[^/\\]*$/.exec(this.FILEPATH(e2))[0];
      }, FILENAME_BASE: function(e2) {
        return /[^/\\]*$/.exec(this.FILEPATH(e2))[0].replace(/\.[^.]*$/, "");
      }, DIRECTORY: function(e2) {
        return this.FILEPATH(e2).replace(/[^/\\]*$/, "");
      }, FILEPATH: function(e2) {
        return "/not implemented.txt";
      }, WORKSPACE_NAME: function() {
        return "Unknown";
      }, FULLNAME: function() {
        return "Unknown";
      }, BLOCK_COMMENT_START: function(e2) {
        var t2 = e2.session.$mode || {};
        return t2.blockComment && t2.blockComment.start || "";
      }, BLOCK_COMMENT_END: function(e2) {
        var t2 = e2.session.$mode || {};
        return t2.blockComment && t2.blockComment.end || "";
      }, LINE_COMMENT: function(e2) {
        var t2 = e2.session.$mode || {};
        return t2.lineCommentStart || "";
      }, CURRENT_YEAR: p.bind(null, { year: "numeric" }), CURRENT_YEAR_SHORT: p.bind(null, { year: "2-digit" }), CURRENT_MONTH: p.bind(null, { month: "numeric" }), CURRENT_MONTH_NAME: p.bind(null, { month: "long" }), CURRENT_MONTH_NAME_SHORT: p.bind(null, { month: "short" }), CURRENT_DATE: p.bind(null, { day: "2-digit" }), CURRENT_DAY_NAME: p.bind(null, { weekday: "long" }), CURRENT_DAY_NAME_SHORT: p.bind(null, { weekday: "short" }), CURRENT_HOUR: p.bind(null, { hour: "2-digit", hour12: false }), CURRENT_MINUTE: p.bind(null, { minute: "2-digit" }), CURRENT_SECOND: p.bind(null, { second: "2-digit" }) };
      h.SELECTED_TEXT = h.SELECTION;
      var d = function() {
        function e2() {
          this.snippetMap = {}, this.snippetNameMap = {}, this.variables = h;
        }
        return e2.prototype.getTokenizer = function() {
          return e2.$tokenizer || this.createTokenizer();
        }, e2.prototype.createTokenizer = function() {
          function t2(e3) {
            return e3 = e3.substr(1), /^\d+$/.test(e3) ? [{ tabstopId: parseInt(e3, 10) }] : [{ text: e3 }];
          }
          function n2(e3) {
            return "(?:[^\\\\" + e3 + "]|\\\\.)";
          }
          var r2 = { regex: "/(" + n2("/") + "+)/", onMatch: function(e3, t3, n3) {
            var r3 = n3[0];
            return r3.fmtString = true, r3.guard = e3.slice(1, -1), r3.flag = "", "";
          }, next: "formatString" };
          return e2.$tokenizer = new l({ start: [{ regex: /\\./, onMatch: function(e3, t3, n3) {
            var r3 = e3[1];
            return r3 == "}" && n3.length ? e3 = r3 : "`$\\".indexOf(r3) != -1 && (e3 = r3), [e3];
          } }, { regex: /}/, onMatch: function(e3, t3, n3) {
            return [n3.length ? n3.shift() : e3];
          } }, { regex: /\$(?:\d+|\w+)/, onMatch: t2 }, { regex: /\$\{[\dA-Z_a-z]+/, onMatch: function(e3, n3, r3) {
            var i2 = t2(e3.substr(1));
            return r3.unshift(i2[0]), i2;
          }, next: "snippetVar" }, { regex: /\n/, token: "newline", merge: false }], snippetVar: [{ regex: "\\|" + n2("\\|") + "*\\|", onMatch: function(e3, t3, n3) {
            var r3 = e3.slice(1, -1).replace(/\\[,|\\]|,/g, function(e4) {
              return e4.length == 2 ? e4[1] : "\0";
            }).split("\0").map(function(e4) {
              return { value: e4 };
            });
            return n3[0].choices = r3, [r3[0]];
          }, next: "start" }, r2, { regex: "([^:}\\\\]|\\\\.)*:?", token: "", next: "start" }], formatString: [{ regex: /:/, onMatch: function(e3, t3, n3) {
            return n3.length && n3[0].expectElse ? (n3[0].expectElse = false, n3[0].ifEnd = { elseEnd: n3[0] }, [n3[0].ifEnd]) : ":";
          } }, { regex: /\\./, onMatch: function(e3, t3, n3) {
            var r3 = e3[1];
            return r3 == "}" && n3.length ? e3 = r3 : "`$\\".indexOf(r3) != -1 ? e3 = r3 : r3 == "n" ? e3 = "\n" : r3 == "t" ? e3 = "	" : "ulULE".indexOf(r3) != -1 && (e3 = { changeCase: r3, local: r3 > "a" }), [e3];
          } }, { regex: "/\\w*}", onMatch: function(e3, t3, n3) {
            var r3 = n3.shift();
            return r3 && (r3.flag = e3.slice(1, -1)), this.next = r3 && r3.tabstopId ? "start" : "", [r3 || e3];
          }, next: "start" }, { regex: /\$(?:\d+|\w+)/, onMatch: function(e3, t3, n3) {
            return [{ text: e3.slice(1) }];
          } }, { regex: /\${\w+/, onMatch: function(e3, t3, n3) {
            var r3 = { text: e3.slice(2) };
            return n3.unshift(r3), [r3];
          }, next: "formatStringVar" }, { regex: /\n/, token: "newline", merge: false }, { regex: /}/, onMatch: function(e3, t3, n3) {
            var r3 = n3.shift();
            return this.next = r3 && r3.tabstopId ? "start" : "", [r3 || e3];
          }, next: "start" }], formatStringVar: [{ regex: /:\/\w+}/, onMatch: function(e3, t3, n3) {
            var r3 = n3[0];
            return r3.formatFunction = e3.slice(2, -1), [n3.shift()];
          }, next: "formatString" }, r2, { regex: /:[\?\-+]?/, onMatch: function(e3, t3, n3) {
            e3[1] == "+" && (n3[0].ifEnd = n3[0]), e3[1] == "?" && (n3[0].expectElse = true);
          }, next: "formatString" }, { regex: "([^:}\\\\]|\\\\.)*:?", token: "", next: "formatString" }] }), e2.$tokenizer;
        }, e2.prototype.tokenizeTmSnippet = function(e3, t2) {
          return this.getTokenizer().getLineTokens(e3, t2).tokens.map(function(e4) {
            return e4.value || e4;
          });
        }, e2.prototype.getVariableValue = function(e3, t2, n2) {
          if (/^\d+$/.test(t2))
            return (this.variables.__ || {})[t2] || "";
          if (/^[A-Z]\d+$/.test(t2))
            return (this.variables[t2[0] + "__"] || {})[t2.substr(1)] || "";
          t2 = t2.replace(/^TM_/, "");
          if (!this.variables.hasOwnProperty(t2))
            return "";
          var r2 = this.variables[t2];
          return typeof r2 == "function" && (r2 = this.variables[t2](e3, t2, n2)), r2 == null ? "" : r2;
        }, e2.prototype.tmStrFormat = function(e3, t2, n2) {
          if (!t2.fmt)
            return e3;
          var r2 = t2.flag || "", i2 = t2.guard;
          i2 = new RegExp(i2, r2.replace(/[^gim]/g, ""));
          var s2 = typeof t2.fmt == "string" ? this.tokenizeTmSnippet(t2.fmt, "formatString") : t2.fmt, o2 = this, u2 = e3.replace(i2, function() {
            var e4 = o2.variables.__;
            o2.variables.__ = [].slice.call(arguments);
            var t3 = o2.resolveVariables(s2, n2), r3 = "E";
            for (var i3 = 0; i3 < t3.length; i3++) {
              var u3 = t3[i3];
              if (typeof u3 == "object") {
                t3[i3] = "";
                if (u3.changeCase && u3.local) {
                  var a2 = t3[i3 + 1];
                  a2 && typeof a2 == "string" && (u3.changeCase == "u" ? t3[i3] = a2[0].toUpperCase() : t3[i3] = a2[0].toLowerCase(), t3[i3 + 1] = a2.substr(1));
                } else
                  u3.changeCase && (r3 = u3.changeCase);
              } else
                r3 == "U" ? t3[i3] = u3.toUpperCase() : r3 == "L" && (t3[i3] = u3.toLowerCase());
            }
            return o2.variables.__ = e4, t3.join("");
          });
          return u2;
        }, e2.prototype.tmFormatFunction = function(e3, t2, n2) {
          return t2.formatFunction == "upcase" ? e3.toUpperCase() : t2.formatFunction == "downcase" ? e3.toLowerCase() : e3;
        }, e2.prototype.resolveVariables = function(e3, t2) {
          function f2(t3) {
            var n3 = e3.indexOf(t3, s2 + 1);
            n3 != -1 && (s2 = n3);
          }
          var n2 = [], r2 = "", i2 = true;
          for (var s2 = 0; s2 < e3.length; s2++) {
            var o2 = e3[s2];
            if (typeof o2 == "string") {
              n2.push(o2), o2 == "\n" ? (i2 = true, r2 = "") : i2 && (r2 = /^\t*/.exec(o2)[0], i2 = /\S/.test(o2));
              continue;
            }
            if (!o2)
              continue;
            i2 = false;
            if (o2.fmtString) {
              var u2 = e3.indexOf(o2, s2 + 1);
              u2 == -1 && (u2 = e3.length), o2.fmt = e3.slice(s2 + 1, u2), s2 = u2;
            }
            if (o2.text) {
              var a2 = this.getVariableValue(t2, o2.text, r2) + "";
              o2.fmtString && (a2 = this.tmStrFormat(a2, o2, t2)), o2.formatFunction && (a2 = this.tmFormatFunction(a2, o2, t2)), a2 && !o2.ifEnd ? (n2.push(a2), f2(o2)) : !a2 && o2.ifEnd && f2(o2.ifEnd);
            } else
              o2.elseEnd ? f2(o2.elseEnd) : o2.tabstopId != null ? n2.push(o2) : o2.changeCase != null && n2.push(o2);
          }
          return n2;
        }, e2.prototype.getDisplayTextForSnippet = function(e3, t2) {
          var n2 = v.call(this, e3, t2);
          return n2.text;
        }, e2.prototype.insertSnippetForSelection = function(e3, t2, n2) {
          n2 === void 0 && (n2 = {});
          var r2 = v.call(this, e3, t2, n2), i2 = e3.getSelectionRange(), s2 = e3.session.replace(i2, r2.text), o2 = new m(e3), u2 = e3.inVirtualSelectionMode && e3.selection.index;
          o2.addTabstops(r2.tabstops, i2.start, s2, u2);
        }, e2.prototype.insertSnippet = function(e3, t2, n2) {
          n2 === void 0 && (n2 = {});
          var r2 = this;
          if (e3.inVirtualSelectionMode)
            return r2.insertSnippetForSelection(e3, t2, n2);
          e3.forEachSelection(function() {
            r2.insertSnippetForSelection(e3, t2, n2);
          }, null, { keepOrder: true }), e3.tabstopManager && e3.tabstopManager.tabNext();
        }, e2.prototype.$getScope = function(e3) {
          var t2 = e3.session.$mode.$id || "";
          t2 = t2.split("/").pop();
          if (t2 === "html" || t2 === "php") {
            t2 === "php" && !e3.session.$mode.inlinePhp && (t2 = "html");
            var n2 = e3.getCursorPosition(), r2 = e3.session.getState(n2.row);
            typeof r2 == "object" && (r2 = r2[0]), r2.substring && (r2.substring(0, 3) == "js-" ? t2 = "javascript" : r2.substring(0, 4) == "css-" ? t2 = "css" : r2.substring(0, 4) == "php-" && (t2 = "php"));
          }
          return t2;
        }, e2.prototype.getActiveScopes = function(e3) {
          var t2 = this.$getScope(e3), n2 = [t2], r2 = this.snippetMap;
          return r2[t2] && r2[t2].includeScopes && n2.push.apply(n2, r2[t2].includeScopes), n2.push("_"), n2;
        }, e2.prototype.expandWithTab = function(e3, t2) {
          var n2 = this, r2 = e3.forEachSelection(function() {
            return n2.expandSnippetForSelection(e3, t2);
          }, null, { keepOrder: true });
          return r2 && e3.tabstopManager && e3.tabstopManager.tabNext(), r2;
        }, e2.prototype.expandSnippetForSelection = function(e3, t2) {
          var n2 = e3.getCursorPosition(), r2 = e3.session.getLine(n2.row), i2 = r2.substring(0, n2.column), s2 = r2.substr(n2.column), o2 = this.snippetMap, u2;
          return this.getActiveScopes(e3).some(function(e4) {
            var t3 = o2[e4];
            return t3 && (u2 = this.findMatchingSnippet(t3, i2, s2)), !!u2;
          }, this), u2 ? t2 && t2.dryRun ? true : (e3.session.doc.removeInLine(n2.row, n2.column - u2.replaceBefore.length, n2.column + u2.replaceAfter.length), this.variables.M__ = u2.matchBefore, this.variables.T__ = u2.matchAfter, this.insertSnippetForSelection(e3, u2.content), this.variables.M__ = this.variables.T__ = null, true) : false;
        }, e2.prototype.findMatchingSnippet = function(e3, t2, n2) {
          for (var r2 = e3.length; r2--; ) {
            var i2 = e3[r2];
            if (i2.startRe && !i2.startRe.test(t2))
              continue;
            if (i2.endRe && !i2.endRe.test(n2))
              continue;
            if (!i2.startRe && !i2.endRe)
              continue;
            return i2.matchBefore = i2.startRe ? i2.startRe.exec(t2) : [""], i2.matchAfter = i2.endRe ? i2.endRe.exec(n2) : [""], i2.replaceBefore = i2.triggerRe ? i2.triggerRe.exec(t2)[0] : "", i2.replaceAfter = i2.endTriggerRe ? i2.endTriggerRe.exec(n2)[0] : "", i2;
          }
        }, e2.prototype.register = function(e3, t2) {
          function s2(e4) {
            return e4 && !/^\^?\(.*\)\$?$|^\\b$/.test(e4) && (e4 = "(?:" + e4 + ")"), e4 || "";
          }
          function u2(e4, t3, n3) {
            return e4 = s2(e4), t3 = s2(t3), n3 ? (e4 = t3 + e4, e4 && e4[e4.length - 1] != "$" && (e4 += "$")) : (e4 += t3, e4 && e4[0] != "^" && (e4 = "^" + e4)), new RegExp(e4);
          }
          function a2(e4) {
            e4.scope || (e4.scope = t2 || "_"), t2 = e4.scope, n2[t2] || (n2[t2] = [], r2[t2] = {});
            var s3 = r2[t2];
            if (e4.name) {
              var a3 = s3[e4.name];
              a3 && i2.unregister(a3), s3[e4.name] = e4;
            }
            n2[t2].push(e4), e4.prefix && (e4.tabTrigger = e4.prefix), !e4.content && e4.body && (e4.content = Array.isArray(e4.body) ? e4.body.join("\n") : e4.body), e4.tabTrigger && !e4.trigger && (!e4.guard && /^\w/.test(e4.tabTrigger) && (e4.guard = "\\b"), e4.trigger = o.escapeRegExp(e4.tabTrigger));
            if (!e4.trigger && !e4.guard && !e4.endTrigger && !e4.endGuard)
              return;
            e4.startRe = u2(e4.trigger, e4.guard, true), e4.triggerRe = new RegExp(e4.trigger), e4.endRe = u2(e4.endTrigger, e4.endGuard, true), e4.endTriggerRe = new RegExp(e4.endTrigger);
          }
          var n2 = this.snippetMap, r2 = this.snippetNameMap, i2 = this;
          e3 || (e3 = []), Array.isArray(e3) ? e3.forEach(a2) : Object.keys(e3).forEach(function(t3) {
            a2(e3[t3]);
          }), this._signal("registerSnippets", { scope: t2 });
        }, e2.prototype.unregister = function(e3, t2) {
          function i2(e4) {
            var i3 = r2[e4.scope || t2];
            if (i3 && i3[e4.name]) {
              delete i3[e4.name];
              var s2 = n2[e4.scope || t2], o2 = s2 && s2.indexOf(e4);
              o2 >= 0 && s2.splice(o2, 1);
            }
          }
          var n2 = this.snippetMap, r2 = this.snippetNameMap;
          e3.content ? i2(e3) : Array.isArray(e3) && e3.forEach(i2);
        }, e2.prototype.parseSnippetFile = function(e3) {
          e3 = e3.replace(/\r/g, "");
          var t2 = [], n2 = {}, r2 = /^#.*|^({[\s\S]*})\s*$|^(\S+) (.*)$|^((?:\n*\t.*)+)/gm, i2;
          while (i2 = r2.exec(e3)) {
            if (i2[1])
              try {
                n2 = JSON.parse(i2[1]), t2.push(n2);
              } catch (s2) {
              }
            if (i2[4])
              n2.content = i2[4].replace(/^\t/gm, ""), t2.push(n2), n2 = {};
            else {
              var o2 = i2[2], u2 = i2[3];
              if (o2 == "regex") {
                var a2 = /\/((?:[^\/\\]|\\.)*)|$/g;
                n2.guard = a2.exec(u2)[1], n2.trigger = a2.exec(u2)[1], n2.endTrigger = a2.exec(u2)[1], n2.endGuard = a2.exec(u2)[1];
              } else
                o2 == "snippet" ? (n2.tabTrigger = u2.match(/^\S*/)[0], n2.name || (n2.name = u2)) : o2 && (n2[o2] = u2);
            }
          }
          return t2;
        }, e2.prototype.getSnippetByName = function(e3, t2) {
          var n2 = this.snippetNameMap, r2;
          return this.getActiveScopes(t2).some(function(t3) {
            var i2 = n2[t3];
            return i2 && (r2 = i2[e3]), !!r2;
          }, this), r2;
        }, e2;
      }();
      i.implement(d.prototype, s);
      var v = function(e2, t2, n2) {
        function l2(e3) {
          var t3 = [];
          for (var n3 = 0; n3 < e3.length; n3++) {
            var r3 = e3[n3];
            if (typeof r3 == "object") {
              if (f2[r3.tabstopId])
                continue;
              var i3 = e3.lastIndexOf(r3, n3 - 1);
              r3 = t3[i3] || { tabstopId: r3.tabstopId };
            }
            t3[n3] = r3;
          }
          return t3;
        }
        n2 === void 0 && (n2 = {});
        var r2 = e2.getCursorPosition(), i2 = e2.session.getLine(r2.row), s2 = e2.session.getTabString(), o2 = i2.match(/^\s*/)[0];
        r2.column < o2.length && (o2 = o2.slice(0, r2.column)), t2 = t2.replace(/\r/g, "");
        var u2 = this.tokenizeTmSnippet(t2);
        u2 = this.resolveVariables(u2, e2), u2 = u2.map(function(e3) {
          return e3 == "\n" && !n2.excludeExtraIndent ? e3 + o2 : typeof e3 == "string" ? e3.replace(/\t/g, s2) : e3;
        });
        var a2 = [];
        u2.forEach(function(e3, t3) {
          if (typeof e3 != "object")
            return;
          var n3 = e3.tabstopId, r3 = a2[n3];
          r3 || (r3 = a2[n3] = [], r3.index = n3, r3.value = "", r3.parents = {});
          if (r3.indexOf(e3) !== -1)
            return;
          e3.choices && !r3.choices && (r3.choices = e3.choices), r3.push(e3);
          var i3 = u2.indexOf(e3, t3 + 1);
          if (i3 === -1)
            return;
          var s3 = u2.slice(t3 + 1, i3), o3 = s3.some(function(e4) {
            return typeof e4 == "object";
          });
          o3 && !r3.value ? r3.value = s3 : s3.length && (!r3.value || typeof r3.value != "string") && (r3.value = s3.join(""));
        }), a2.forEach(function(e3) {
          e3.length = 0;
        });
        var f2 = {};
        for (var c2 = 0; c2 < u2.length; c2++) {
          var h2 = u2[c2];
          if (typeof h2 != "object")
            continue;
          var p2 = h2.tabstopId, d2 = a2[p2], v2 = u2.indexOf(h2, c2 + 1);
          if (f2[p2]) {
            f2[p2] === h2 && (delete f2[p2], Object.keys(f2).forEach(function(e3) {
              d2.parents[e3] = true;
            }));
            continue;
          }
          f2[p2] = h2;
          var m2 = d2.value;
          typeof m2 != "string" ? m2 = l2(m2) : h2.fmt && (m2 = this.tmStrFormat(m2, h2, e2)), u2.splice.apply(u2, [c2 + 1, Math.max(0, v2 - c2)].concat(m2, h2)), d2.indexOf(h2) === -1 && d2.push(h2);
        }
        var g2 = 0, y2 = 0, b2 = "";
        return u2.forEach(function(e3) {
          if (typeof e3 == "string") {
            var t3 = e3.split("\n");
            t3.length > 1 ? (y2 = t3[t3.length - 1].length, g2 += t3.length - 1) : y2 += e3.length, b2 += e3;
          } else
            e3 && (e3.start ? e3.end = { row: g2, column: y2 } : e3.start = { row: g2, column: y2 });
        }), { text: b2, tabstops: a2, tokens: u2 };
      }, m = function() {
        function e2(e3) {
          this.index = 0, this.ranges = [], this.tabstops = [];
          if (e3.tabstopManager)
            return e3.tabstopManager;
          e3.tabstopManager = this, this.$onChange = this.onChange.bind(this), this.$onChangeSelection = o.delayedCall(this.onChangeSelection.bind(this)).schedule, this.$onChangeSession = this.onChangeSession.bind(this), this.$onAfterExec = this.onAfterExec.bind(this), this.attach(e3);
        }
        return e2.prototype.attach = function(e3) {
          this.$openTabstops = null, this.selectedTabstop = null, this.editor = e3, this.session = e3.session, this.editor.on("change", this.$onChange), this.editor.on("changeSelection", this.$onChangeSelection), this.editor.on("changeSession", this.$onChangeSession), this.editor.commands.on("afterExec", this.$onAfterExec), this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);
        }, e2.prototype.detach = function() {
          this.tabstops.forEach(this.removeTabstopMarkers, this), this.ranges.length = 0, this.tabstops.length = 0, this.selectedTabstop = null, this.editor.off("change", this.$onChange), this.editor.off("changeSelection", this.$onChangeSelection), this.editor.off("changeSession", this.$onChangeSession), this.editor.commands.off("afterExec", this.$onAfterExec), this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler), this.editor.tabstopManager = null, this.session = null, this.editor = null;
        }, e2.prototype.onChange = function(e3) {
          var t2 = e3.action[0] == "r", n2 = this.selectedTabstop || {}, r2 = n2.parents || {}, i2 = this.tabstops.slice();
          for (var s2 = 0; s2 < i2.length; s2++) {
            var o2 = i2[s2], u2 = o2 == n2 || r2[o2.index];
            o2.rangeList.$bias = u2 ? 0 : 1;
            if (e3.action == "remove" && o2 !== n2) {
              var a2 = o2.parents && o2.parents[n2.index], f2 = o2.rangeList.pointIndex(e3.start, a2);
              f2 = f2 < 0 ? -f2 - 1 : f2 + 1;
              var l2 = o2.rangeList.pointIndex(e3.end, a2);
              l2 = l2 < 0 ? -l2 - 1 : l2 - 1;
              var c2 = o2.rangeList.ranges.slice(f2, l2);
              for (var h2 = 0; h2 < c2.length; h2++)
                this.removeRange(c2[h2]);
            }
            o2.rangeList.$onChange(e3);
          }
          var p2 = this.session;
          !this.$inChange && t2 && p2.getLength() == 1 && !p2.getValue() && this.detach();
        }, e2.prototype.updateLinkedFields = function() {
          var e3 = this.selectedTabstop;
          if (!e3 || !e3.hasLinkedRanges || !e3.firstNonLinked)
            return;
          this.$inChange = true;
          var n2 = this.session, r2 = n2.getTextRange(e3.firstNonLinked);
          for (var i2 = 0; i2 < e3.length; i2++) {
            var s2 = e3[i2];
            if (!s2.linked)
              continue;
            var o2 = s2.original, u2 = t.snippetManager.tmStrFormat(r2, o2, this.editor);
            n2.replace(s2, u2);
          }
          this.$inChange = false;
        }, e2.prototype.onAfterExec = function(e3) {
          e3.command && !e3.command.readOnly && this.updateLinkedFields();
        }, e2.prototype.onChangeSelection = function() {
          if (!this.editor)
            return;
          var e3 = this.editor.selection.lead, t2 = this.editor.selection.anchor, n2 = this.editor.selection.isEmpty();
          for (var r2 = 0; r2 < this.ranges.length; r2++) {
            if (this.ranges[r2].linked)
              continue;
            var i2 = this.ranges[r2].contains(e3.row, e3.column), s2 = n2 || this.ranges[r2].contains(t2.row, t2.column);
            if (i2 && s2)
              return;
          }
          this.detach();
        }, e2.prototype.onChangeSession = function() {
          this.detach();
        }, e2.prototype.tabNext = function(e3) {
          var t2 = this.tabstops.length, n2 = this.index + (e3 || 1);
          n2 = Math.min(Math.max(n2, 1), t2), n2 == t2 && (n2 = 0), this.selectTabstop(n2), this.updateTabstopMarkers(), n2 === 0 && this.detach();
        }, e2.prototype.selectTabstop = function(e3) {
          this.$openTabstops = null;
          var t2 = this.tabstops[this.index];
          t2 && this.addTabstopMarkers(t2), this.index = e3, t2 = this.tabstops[this.index];
          if (!t2 || !t2.length)
            return;
          this.selectedTabstop = t2;
          var n2 = t2.firstNonLinked || t2;
          t2.choices && (n2.cursor = n2.start);
          if (!this.editor.inVirtualSelectionMode) {
            var r2 = this.editor.multiSelect;
            r2.toSingleRange(n2);
            for (var i2 = 0; i2 < t2.length; i2++) {
              if (t2.hasLinkedRanges && t2[i2].linked)
                continue;
              r2.addRange(t2[i2].clone(), true);
            }
          } else
            this.editor.selection.fromOrientedRange(n2);
          this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler), this.selectedTabstop && this.selectedTabstop.choices && this.editor.execCommand("startAutocomplete", { matches: this.selectedTabstop.choices });
        }, e2.prototype.addTabstops = function(e3, t2, n2) {
          var r2 = this.useLink || !this.editor.getOption("enableMultiselect");
          this.$openTabstops || (this.$openTabstops = []);
          if (!e3[0]) {
            var i2 = u.fromPoints(n2, n2);
            y(i2.start, t2), y(i2.end, t2), e3[0] = [i2], e3[0].index = 0;
          }
          var s2 = this.index, o2 = [s2 + 1, 0], f2 = this.ranges, l2 = this.snippetId = (this.snippetId || 0) + 1;
          e3.forEach(function(e4, n3) {
            var i3 = this.$openTabstops[n3] || e4;
            i3.snippetId = l2;
            for (var s3 = 0; s3 < e4.length; s3++) {
              var c2 = e4[s3], h2 = u.fromPoints(c2.start, c2.end || c2.start);
              g(h2.start, t2), g(h2.end, t2), h2.original = c2, h2.tabstop = i3, f2.push(h2), i3 != e4 ? i3.unshift(h2) : i3[s3] = h2, c2.fmtString || i3.firstNonLinked && r2 ? (h2.linked = true, i3.hasLinkedRanges = true) : i3.firstNonLinked || (i3.firstNonLinked = h2);
            }
            i3.firstNonLinked || (i3.hasLinkedRanges = false), i3 === e4 && (o2.push(i3), this.$openTabstops[n3] = i3), this.addTabstopMarkers(i3), i3.rangeList = i3.rangeList || new a(), i3.rangeList.$bias = 0, i3.rangeList.addList(i3);
          }, this), o2.length > 2 && (this.tabstops.length && o2.push(o2.splice(2, 1)[0]), this.tabstops.splice.apply(this.tabstops, o2));
        }, e2.prototype.addTabstopMarkers = function(e3) {
          var t2 = this.session;
          e3.forEach(function(e4) {
            e4.markerId || (e4.markerId = t2.addMarker(e4, "ace_snippet-marker", "text"));
          });
        }, e2.prototype.removeTabstopMarkers = function(e3) {
          var t2 = this.session;
          e3.forEach(function(e4) {
            t2.removeMarker(e4.markerId), e4.markerId = null;
          });
        }, e2.prototype.updateTabstopMarkers = function() {
          if (!this.selectedTabstop)
            return;
          var e3 = this.selectedTabstop.snippetId;
          this.selectedTabstop.index === 0 && e3--, this.tabstops.forEach(function(t2) {
            t2.snippetId === e3 ? this.addTabstopMarkers(t2) : this.removeTabstopMarkers(t2);
          }, this);
        }, e2.prototype.removeRange = function(e3) {
          var t2 = e3.tabstop.indexOf(e3);
          t2 != -1 && e3.tabstop.splice(t2, 1), t2 = this.ranges.indexOf(e3), t2 != -1 && this.ranges.splice(t2, 1), t2 = e3.tabstop.rangeList.ranges.indexOf(e3), t2 != -1 && e3.tabstop.splice(t2, 1), this.session.removeMarker(e3.markerId), e3.tabstop.length || (t2 = this.tabstops.indexOf(e3.tabstop), t2 != -1 && this.tabstops.splice(t2, 1), this.tabstops.length || this.detach());
        }, e2;
      }();
      m.prototype.keyboardHandler = new f(), m.prototype.keyboardHandler.bindKeys({ Tab: function(e2) {
        if (t.snippetManager && t.snippetManager.expandWithTab(e2))
          return;
        e2.tabstopManager.tabNext(1), e2.renderer.scrollCursorIntoView();
      }, "Shift-Tab": function(e2) {
        e2.tabstopManager.tabNext(-1), e2.renderer.scrollCursorIntoView();
      }, Esc: function(e2) {
        e2.tabstopManager.detach();
      } });
      var g = function(e2, t2) {
        e2.row == 0 && (e2.column += t2.column), e2.row += t2.row;
      }, y = function(e2, t2) {
        e2.row == t2.row && (e2.column -= t2.column), e2.row -= t2.row;
      };
      r.importCssString("\n.ace_snippet-marker {\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    background: rgba(194, 193, 208, 0.09);\n    border: 1px dotted rgba(211, 208, 235, 0.62);\n    position: absolute;\n}", "snippets.css", false), t.snippetManager = new d();
      var b = e("./editor").Editor;
      (function() {
        this.insertSnippet = function(e2, n2) {
          return t.snippetManager.insertSnippet(this, e2, n2);
        }, this.expandSnippet = function(e2) {
          return t.snippetManager.expandWithTab(this, e2);
        };
      }).call(b.prototype);
    }), ace.define("ace/autocomplete/popup", ["require", "exports", "module", "ace/virtual_renderer", "ace/editor", "ace/range", "ace/lib/event", "ace/lib/lang", "ace/lib/dom", "ace/config", "ace/lib/useragent"], function(e, t, n) {
      "use strict";
      var r = e("../virtual_renderer").VirtualRenderer, i = e("../editor").Editor, s = e("../range").Range, o = e("../lib/event"), u = e("../lib/lang"), a = e("../lib/dom"), f = e("../config").nls, l = e("./../lib/useragent"), c = function(e2) {
        return "suggest-aria-id:".concat(e2);
      }, h = l.isSafari ? "menu" : "listbox", p = l.isSafari ? "menuitem" : "option", d = l.isSafari ? "aria-current" : "aria-selected", v = function(e2) {
        var t2 = new r(e2);
        t2.$maxLines = 4;
        var n2 = new i(t2);
        return n2.setHighlightActiveLine(false), n2.setShowPrintMargin(false), n2.renderer.setShowGutter(false), n2.renderer.setHighlightGutterLine(false), n2.$mouseHandler.$focusTimeout = 0, n2.$highlightTagPending = true, n2;
      }, m = /* @__PURE__ */ function() {
        function e2(e3) {
          var t2 = a.createElement("div"), n2 = v(t2);
          e3 && e3.appendChild(t2), t2.style.display = "none", n2.renderer.content.style.cursor = "default", n2.renderer.setStyle("ace_autocomplete"), n2.renderer.$textLayer.element.setAttribute("role", h), n2.renderer.$textLayer.element.setAttribute("aria-roledescription", f("autocomplete.popup.aria-roledescription", "Autocomplete suggestions")), n2.renderer.$textLayer.element.setAttribute("aria-label", f("autocomplete.popup.aria-label", "Autocomplete suggestions")), n2.renderer.textarea.setAttribute("aria-hidden", "true"), n2.setOption("displayIndentGuides", false), n2.setOption("dragDelay", 150);
          var r2 = function() {
          };
          n2.focus = r2, n2.$isFocused = true, n2.renderer.$cursorLayer.restartTimer = r2, n2.renderer.$cursorLayer.element.style.opacity = "0", n2.renderer.$maxLines = 8, n2.renderer.$keepTextAreaAtCursor = false, n2.setHighlightActiveLine(false), n2.session.highlight(""), n2.session.$searchHighlight.clazz = "ace_highlight-marker", n2.on("mousedown", function(e4) {
            var t3 = e4.getDocumentPosition();
            n2.selection.moveToPosition(t3), m2.start.row = m2.end.row = t3.row, e4.stop();
          });
          var i2, l2 = new s(-1, 0, -1, Infinity), m2 = new s(-1, 0, -1, Infinity);
          m2.id = n2.session.addMarker(m2, "ace_active-line", "fullLine"), n2.setSelectOnHover = function(e4) {
            e4 ? l2.id && (n2.session.removeMarker(l2.id), l2.id = null) : l2.id = n2.session.addMarker(l2, "ace_line-hover", "fullLine");
          }, n2.setSelectOnHover(false), n2.on("mousemove", function(e4) {
            if (!i2) {
              i2 = e4;
              return;
            }
            if (i2.x == e4.x && i2.y == e4.y)
              return;
            i2 = e4, i2.scrollTop = n2.renderer.scrollTop, n2.isMouseOver = true;
            var t3 = i2.getDocumentPosition().row;
            l2.start.row != t3 && (l2.id || n2.setRow(t3), y(t3));
          }), n2.renderer.on("beforeRender", function() {
            if (i2 && l2.start.row != -1) {
              i2.$pos = null;
              var e4 = i2.getDocumentPosition().row;
              l2.id || n2.setRow(e4), y(e4, true);
            }
          }), n2.renderer.on("afterRender", function() {
            var e4 = n2.renderer.$textLayer;
            for (var t3 = e4.config.firstRow, r3 = e4.config.lastRow; t3 <= r3; t3++) {
              var i3 = e4.element.childNodes[t3 - e4.config.firstRow], s2 = n2.getData(t3), o2 = "".concat(s2.caption || s2.value).concat(s2.meta ? ", ".concat(s2.meta) : "");
              i3.setAttribute("role", p), i3.setAttribute("aria-roledescription", f("autocomplete.popup.item.aria-roledescription", "item")), i3.setAttribute("aria-label", o2), i3.setAttribute("aria-setsize", n2.data.length), i3.setAttribute("aria-describedby", "doc-tooltip"), i3.setAttribute("aria-posinset", t3 + 1);
              var u2 = i3.querySelectorAll(".ace_completion-highlight");
              u2.forEach(function(e5) {
                e5.setAttribute("role", "mark");
              });
            }
          }), n2.renderer.on("afterRender", function() {
            var e4 = n2.getRow(), t3 = n2.renderer.$textLayer, r3 = t3.element.childNodes[e4 - t3.config.firstRow], i3 = document.activeElement;
            r3 !== n2.selectedNode && n2.selectedNode && (a.removeCssClass(n2.selectedNode, "ace_selected"), n2.selectedNode.removeAttribute(d), n2.selectedNode.removeAttribute("id")), i3.removeAttribute("aria-activedescendant"), n2.selectedNode = r3;
            if (r3) {
              var s2 = c(e4);
              a.addCssClass(r3, "ace_selected"), r3.id = s2, t3.element.setAttribute("aria-activedescendant", s2), i3.setAttribute("aria-activedescendant", s2), r3.setAttribute(d, "true");
            }
          });
          var g = function() {
            y(-1);
          }, y = function(e4, t3) {
            e4 !== l2.start.row && (l2.start.row = l2.end.row = e4, t3 || n2.session._emit("changeBackMarker"), n2._emit("changeHoverMarker"));
          };
          n2.getHoveredRow = function() {
            return l2.start.row;
          }, o.addListener(n2.container, "mouseout", function() {
            n2.isMouseOver = false, g();
          }), n2.on("hide", g), n2.on("changeSelection", g), n2.session.doc.getLength = function() {
            return n2.data.length;
          }, n2.session.doc.getLine = function(e4) {
            var t3 = n2.data[e4];
            return typeof t3 == "string" ? t3 : t3 && t3.value || "";
          };
          var b = n2.session.bgTokenizer;
          return b.$tokenizeRow = function(e4) {
            function s2(e5, n3) {
              e5 && r3.push({ type: (t3.className || "") + (n3 || ""), value: e5 });
            }
            var t3 = n2.data[e4], r3 = [];
            if (!t3)
              return r3;
            typeof t3 == "string" && (t3 = { value: t3 });
            var i3 = t3.caption || t3.value || t3.name, o2 = i3.toLowerCase(), u2 = (n2.filterText || "").toLowerCase(), a2 = 0, f2 = 0;
            for (var l3 = 0; l3 <= u2.length; l3++)
              if (l3 != f2 && (t3.matchMask & 1 << l3 || l3 == u2.length)) {
                var c2 = u2.slice(f2, l3);
                f2 = l3;
                var h2 = o2.indexOf(c2, a2);
                if (h2 == -1)
                  continue;
                s2(i3.slice(a2, h2), ""), a2 = h2 + c2.length, s2(i3.slice(h2, a2), "completion-highlight");
              }
            return s2(i3.slice(a2, i3.length), ""), r3.push({ type: "completion-spacer", value: " " }), t3.meta && r3.push({ type: "completion-meta", value: t3.meta }), t3.message && r3.push({ type: "completion-message", value: t3.message }), r3;
          }, b.$updateOnChange = r2, b.start = r2, n2.session.$computeWidth = function() {
            return this.screenWidth = 0;
          }, n2.isOpen = false, n2.isTopdown = false, n2.autoSelect = true, n2.filterText = "", n2.isMouseOver = false, n2.data = [], n2.setData = function(e4, t3) {
            n2.filterText = t3 || "", n2.setValue(u.stringRepeat("\n", e4.length), -1), n2.data = e4 || [], n2.setRow(0);
          }, n2.getData = function(e4) {
            return n2.data[e4];
          }, n2.getRow = function() {
            return m2.start.row;
          }, n2.setRow = function(e4) {
            e4 = Math.max(this.autoSelect ? 0 : -1, Math.min(this.data.length - 1, e4)), m2.start.row != e4 && (n2.selection.clearSelection(), m2.start.row = m2.end.row = e4 || 0, n2.session._emit("changeBackMarker"), n2.moveCursorTo(e4 || 0, 0), n2.isOpen && n2._signal("select"));
          }, n2.on("changeSelection", function() {
            n2.isOpen && n2.setRow(n2.selection.lead.row), n2.renderer.scrollCursorIntoView();
          }), n2.hide = function() {
            this.container.style.display = "none", n2.anchorPos = null, n2.anchor = null, n2.isOpen && (n2.isOpen = false, this._signal("hide"));
          }, n2.tryShow = function(e4, t3, r3, s2) {
            if (!s2 && n2.isOpen && n2.anchorPos && n2.anchor && n2.anchorPos.top === e4.top && n2.anchorPos.left === e4.left && n2.anchor === r3)
              return true;
            var o2 = this.container, u2 = window.innerHeight, a2 = window.innerWidth, f2 = this.renderer, l3 = f2.$maxLines * t3 * 1.4, c2 = { top: 0, bottom: 0, left: 0 }, h2 = u2 - e4.top - 3 * this.$borderSize - t3, p2 = e4.top - 3 * this.$borderSize;
            r3 || (p2 <= h2 || h2 >= l3 ? r3 = "bottom" : r3 = "top"), r3 === "top" ? (c2.bottom = e4.top - this.$borderSize, c2.top = c2.bottom - l3) : r3 === "bottom" && (c2.top = e4.top + t3 + this.$borderSize, c2.bottom = c2.top + l3);
            var d2 = c2.top >= 0 && c2.bottom <= u2;
            if (!s2 && !d2)
              return false;
            d2 ? f2.$maxPixelHeight = null : r3 === "top" ? f2.$maxPixelHeight = p2 : f2.$maxPixelHeight = h2, r3 === "top" ? (o2.style.top = "", o2.style.bottom = u2 - c2.bottom + "px", n2.isTopdown = false) : (o2.style.top = c2.top + "px", o2.style.bottom = "", n2.isTopdown = true), o2.style.display = "";
            var v2 = e4.left;
            return v2 + o2.offsetWidth > a2 && (v2 = a2 - o2.offsetWidth), o2.style.left = v2 + "px", o2.style.right = "", n2.isOpen || (n2.isOpen = true, this._signal("show"), i2 = null), n2.anchorPos = e4, n2.anchor = r3, true;
          }, n2.show = function(e4, t3, n3) {
            this.tryShow(e4, t3, n3 ? "bottom" : void 0, true);
          }, n2.goTo = function(e4) {
            var t3 = this.getRow(), n3 = this.session.getLength() - 1;
            switch (e4) {
              case "up":
                t3 = t3 <= 0 ? n3 : t3 - 1;
                break;
              case "down":
                t3 = t3 >= n3 ? -1 : t3 + 1;
                break;
              case "start":
                t3 = 0;
                break;
              case "end":
                t3 = n3;
            }
            this.setRow(t3);
          }, n2.getTextLeftOffset = function() {
            return this.$borderSize + this.renderer.$padding + this.$imageSize;
          }, n2.$imageSize = 0, n2.$borderSize = 1, n2;
        }
        return e2;
      }();
      a.importCssString('\n.ace_editor.ace_autocomplete .ace_marker-layer .ace_active-line {\n    background-color: #CAD6FA;\n    z-index: 1;\n}\n.ace_dark.ace_editor.ace_autocomplete .ace_marker-layer .ace_active-line {\n    background-color: #3a674e;\n}\n.ace_editor.ace_autocomplete .ace_line-hover {\n    border: 1px solid #abbffe;\n    margin-top: -1px;\n    background: rgba(233,233,253,0.4);\n    position: absolute;\n    z-index: 2;\n}\n.ace_dark.ace_editor.ace_autocomplete .ace_line-hover {\n    border: 1px solid rgba(109, 150, 13, 0.8);\n    background: rgba(58, 103, 78, 0.62);\n}\n.ace_completion-meta {\n    opacity: 0.5;\n    margin-left: 0.9em;\n}\n.ace_completion-message {\n    margin-left: 0.9em;\n    color: blue;\n}\n.ace_editor.ace_autocomplete .ace_completion-highlight{\n    color: #2d69c7;\n}\n.ace_dark.ace_editor.ace_autocomplete .ace_completion-highlight{\n    color: #93ca12;\n}\n.ace_editor.ace_autocomplete {\n    width: 300px;\n    z-index: 200000;\n    border: 1px lightgray solid;\n    position: fixed;\n    box-shadow: 2px 3px 5px rgba(0,0,0,.2);\n    line-height: 1.4;\n    background: #fefefe;\n    color: #111;\n}\n.ace_dark.ace_editor.ace_autocomplete {\n    border: 1px #484747 solid;\n    box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.51);\n    line-height: 1.4;\n    background: #25282c;\n    color: #c1c1c1;\n}\n.ace_autocomplete .ace_text-layer  {\n    width: calc(100% - 8px);\n}\n.ace_autocomplete .ace_line {\n    display: flex;\n    align-items: center;\n}\n.ace_autocomplete .ace_line > * {\n    min-width: 0;\n    flex: 0 0 auto;\n}\n.ace_autocomplete .ace_line .ace_ {\n    flex: 0 1 auto;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n.ace_autocomplete .ace_completion-spacer {\n    flex: 1;\n}\n.ace_autocomplete.ace_loading:after  {\n    content: "";\n    position: absolute;\n    top: 0px;\n    height: 2px;\n    width: 8%;\n    background: blue;\n    z-index: 100;\n    animation: ace_progress 3s infinite linear;\n    animation-delay: 300ms;\n    transform: translateX(-100%) scaleX(1);\n}\n@keyframes ace_progress {\n    0% { transform: translateX(-100%) scaleX(1) }\n    50% { transform: translateX(625%) scaleX(2) } \n    100% { transform: translateX(1500%) scaleX(3) } \n}\n@media (prefers-reduced-motion) {\n    .ace_autocomplete.ace_loading:after {\n        transform: translateX(625%) scaleX(2);\n        animation: none;\n     }\n}\n', "autocompletion.css", false), t.AcePopup = m, t.$singleLineEditor = v, t.getAriaId = c;
    }), ace.define("ace/autocomplete/inline_screenreader", ["require", "exports", "module"], function(e, t, n) {
      "use strict";
      var r = function() {
        function e2(e3) {
          this.editor = e3, this.screenReaderDiv = document.createElement("div"), this.screenReaderDiv.classList.add("ace_screenreader-only"), this.editor.container.appendChild(this.screenReaderDiv);
        }
        return e2.prototype.setScreenReaderContent = function(e3) {
          !this.popup && this.editor.completer && this.editor.completer.popup && (this.popup = this.editor.completer.popup, this.popup.renderer.on("afterRender", (function() {
            var e4 = this.popup.getRow(), t3 = this.popup.renderer.$textLayer, n2 = t3.element.childNodes[e4 - t3.config.firstRow];
            if (n2) {
              var r2 = "doc-tooltip ";
              for (var i = 0; i < this._lines.length; i++)
                r2 += "ace-inline-screenreader-line-".concat(i, " ");
              n2.setAttribute("aria-describedby", r2);
            }
          }).bind(this)));
          while (this.screenReaderDiv.firstChild)
            this.screenReaderDiv.removeChild(this.screenReaderDiv.firstChild);
          this._lines = e3.split(/\r\n|\r|\n/);
          var t2 = this.createCodeBlock();
          this.screenReaderDiv.appendChild(t2);
        }, e2.prototype.destroy = function() {
          this.screenReaderDiv.remove();
        }, e2.prototype.createCodeBlock = function() {
          var e3 = document.createElement("pre");
          e3.setAttribute("id", "ace-inline-screenreader");
          for (var t2 = 0; t2 < this._lines.length; t2++) {
            var n2 = document.createElement("code");
            n2.setAttribute("id", "ace-inline-screenreader-line-".concat(t2));
            var r2 = document.createTextNode(this._lines[t2]);
            n2.appendChild(r2), e3.appendChild(n2);
          }
          return e3;
        }, e2;
      }();
      t.AceInlineScreenReader = r;
    }), ace.define("ace/autocomplete/inline", ["require", "exports", "module", "ace/snippets", "ace/autocomplete/inline_screenreader"], function(e, t, n) {
      "use strict";
      var r = e("../snippets").snippetManager, i = e("./inline_screenreader").AceInlineScreenReader, s = function() {
        function e2() {
          this.editor = null;
        }
        return e2.prototype.show = function(e3, t2, n2) {
          n2 = n2 || "", e3 && this.editor && this.editor !== e3 && (this.hide(), this.editor = null, this.inlineScreenReader = null);
          if (!e3 || !t2)
            return false;
          this.inlineScreenReader || (this.inlineScreenReader = new i(e3));
          var s2 = t2.snippet ? r.getDisplayTextForSnippet(e3, t2.snippet) : t2.value;
          return t2.hideInlinePreview || !s2 || !s2.startsWith(n2) ? false : (this.editor = e3, this.inlineScreenReader.setScreenReaderContent(s2), s2 = s2.slice(n2.length), s2 === "" ? e3.removeGhostText() : e3.setGhostText(s2), true);
        }, e2.prototype.isOpen = function() {
          return this.editor ? !!this.editor.renderer.$ghostText : false;
        }, e2.prototype.hide = function() {
          return this.editor ? (this.editor.removeGhostText(), true) : false;
        }, e2.prototype.destroy = function() {
          this.hide(), this.editor = null, this.inlineScreenReader && (this.inlineScreenReader.destroy(), this.inlineScreenReader = null);
        }, e2;
      }();
      t.AceInline = s;
    }), ace.define("ace/autocomplete/util", ["require", "exports", "module"], function(e, t, n) {
      "use strict";
      t.parForEach = function(e2, t2, n2) {
        var r2 = 0, i = e2.length;
        i === 0 && n2();
        for (var s = 0; s < i; s++)
          t2(e2[s], function(e3, t3) {
            r2++, r2 === i && n2(e3, t3);
          });
      };
      var r = /[a-zA-Z_0-9\$\-\u00A2-\u2000\u2070-\uFFFF]/;
      t.retrievePrecedingIdentifier = function(e2, t2, n2) {
        n2 = n2 || r;
        var i = [];
        for (var s = t2 - 1; s >= 0; s--) {
          if (!n2.test(e2[s]))
            break;
          i.push(e2[s]);
        }
        return i.reverse().join("");
      }, t.retrieveFollowingIdentifier = function(e2, t2, n2) {
        n2 = n2 || r;
        var i = [];
        for (var s = t2; s < e2.length; s++) {
          if (!n2.test(e2[s]))
            break;
          i.push(e2[s]);
        }
        return i;
      }, t.getCompletionPrefix = function(e2) {
        var t2 = e2.getCursorPosition(), n2 = e2.session.getLine(t2.row), r2;
        return e2.completers.forEach((function(e3) {
          e3.identifierRegexps && e3.identifierRegexps.forEach((function(e4) {
            !r2 && e4 && (r2 = this.retrievePrecedingIdentifier(n2, t2.column, e4));
          }).bind(this));
        }).bind(this)), r2 || this.retrievePrecedingIdentifier(n2, t2.column);
      }, t.triggerAutocomplete = function(e2, t2) {
        var t2 = t2 == null ? e2.session.getPrecedingCharacter() : t2;
        return e2.completers.some(function(e3) {
          if (e3.triggerCharacters && Array.isArray(e3.triggerCharacters))
            return e3.triggerCharacters.includes(t2);
        });
      };
    }), ace.define("ace/autocomplete", ["require", "exports", "module", "ace/keyboard/hash_handler", "ace/autocomplete/popup", "ace/autocomplete/inline", "ace/autocomplete/popup", "ace/autocomplete/util", "ace/lib/lang", "ace/lib/dom", "ace/snippets", "ace/config", "ace/lib/event", "ace/lib/scroll"], function(e, t, n) {
      "use strict";
      var r = e("./keyboard/hash_handler").HashHandler, i = e("./autocomplete/popup").AcePopup, s = e("./autocomplete/inline").AceInline, o = e("./autocomplete/popup").getAriaId, u = e("./autocomplete/util"), a = e("./lib/lang"), f = e("./lib/dom"), l = e("./snippets").snippetManager, c = e("./config"), h = e("./lib/event"), p = e("./lib/scroll").preventParentScroll, d = function(e2, t2) {
        t2.completer && t2.completer.destroy();
      }, v = function() {
        function e2() {
          this.autoInsert = false, this.autoSelect = true, this.autoShown = false, this.exactMatch = false, this.inlineEnabled = false, this.keyboardHandler = new r(), this.keyboardHandler.bindKeys(this.commands), this.parentNode = null, this.setSelectOnHover = false, this.hasSeen = /* @__PURE__ */ new Set(), this.showLoadingState = false, this.stickySelectionDelay = 500, this.blurListener = this.blurListener.bind(this), this.changeListener = this.changeListener.bind(this), this.mousedownListener = this.mousedownListener.bind(this), this.mousewheelListener = this.mousewheelListener.bind(this), this.onLayoutChange = this.onLayoutChange.bind(this), this.changeTimer = a.delayedCall((function() {
            this.updateCompletions(true);
          }).bind(this)), this.tooltipTimer = a.delayedCall(this.updateDocTooltip.bind(this), 50), this.popupTimer = a.delayedCall(this.$updatePopupPosition.bind(this), 50), this.stickySelectionTimer = a.delayedCall((function() {
            this.stickySelection = true;
          }).bind(this), this.stickySelectionDelay), this.$firstOpenTimer = a.delayedCall((function() {
            var t2 = this.completionProvider && this.completionProvider.initialPosition;
            if (this.autoShown || this.popup && this.popup.isOpen || !t2 || this.editor.completers.length === 0)
              return;
            this.completions = new g(e2.completionsForLoading), this.openPopup(this.editor, t2.prefix, false), this.popup.renderer.setStyle("ace_loading", true);
          }).bind(this), this.stickySelectionDelay);
        }
        return Object.defineProperty(e2, "completionsForLoading", { get: function() {
          return [{ caption: c.nls("autocomplete.loading", "Loading..."), value: "" }];
        }, enumerable: false, configurable: true }), e2.prototype.$init = function() {
          return this.popup = new i(this.parentNode || document.body || document.documentElement), this.popup.on("click", (function(e3) {
            this.insertMatch(), e3.stop();
          }).bind(this)), this.popup.focus = this.editor.focus.bind(this.editor), this.popup.on("show", this.$onPopupShow.bind(this)), this.popup.on("hide", this.$onHidePopup.bind(this)), this.popup.on("select", this.$onPopupChange.bind(this)), h.addListener(this.popup.container, "mouseout", this.mouseOutListener.bind(this)), this.popup.on("changeHoverMarker", this.tooltipTimer.bind(null, null)), this.popup.renderer.on("afterRender", this.$onPopupRender.bind(this)), this.popup;
        }, e2.prototype.$initInline = function() {
          if (!this.inlineEnabled || this.inlineRenderer)
            return;
          return this.inlineRenderer = new s(), this.inlineRenderer;
        }, e2.prototype.getPopup = function() {
          return this.popup || this.$init();
        }, e2.prototype.$onHidePopup = function() {
          this.inlineRenderer && this.inlineRenderer.hide(), this.hideDocTooltip(), this.stickySelectionTimer.cancel(), this.popupTimer.cancel(), this.stickySelection = false;
        }, e2.prototype.$seen = function(e3) {
          !this.hasSeen.has(e3) && e3 && e3.completer && e3.completer.onSeen && typeof e3.completer.onSeen == "function" && (e3.completer.onSeen(this.editor, e3), this.hasSeen.add(e3));
        }, e2.prototype.$onPopupChange = function(e3) {
          if (this.inlineRenderer && this.inlineEnabled) {
            var t2 = e3 ? null : this.popup.getData(this.popup.getRow());
            this.$updateGhostText(t2);
            if (this.popup.isMouseOver && this.setSelectOnHover) {
              this.tooltipTimer.call(null, null);
              return;
            }
            this.popupTimer.schedule(), this.tooltipTimer.schedule();
          } else
            this.popupTimer.call(null, null), this.tooltipTimer.call(null, null);
        }, e2.prototype.$updateGhostText = function(e3) {
          var t2 = this.base.row, n2 = this.base.column, r2 = this.editor.getCursorPosition().column, i2 = this.editor.session.getLine(t2).slice(n2, r2);
          this.inlineRenderer.show(this.editor, e3, i2) ? this.$seen(e3) : this.inlineRenderer.hide();
        }, e2.prototype.$onPopupRender = function() {
          var e3 = this.inlineRenderer && this.inlineEnabled;
          if (this.completions && this.completions.filtered && this.completions.filtered.length > 0)
            for (var t2 = this.popup.getFirstVisibleRow(); t2 <= this.popup.getLastVisibleRow(); t2++) {
              var n2 = this.popup.getData(t2);
              n2 && (!e3 || n2.hideInlinePreview) && this.$seen(n2);
            }
        }, e2.prototype.$onPopupShow = function(e3) {
          this.$onPopupChange(e3), this.stickySelection = false, this.stickySelectionDelay >= 0 && this.stickySelectionTimer.schedule(this.stickySelectionDelay);
        }, e2.prototype.observeLayoutChanges = function() {
          if (this.$elements || !this.editor)
            return;
          window.addEventListener("resize", this.onLayoutChange, { passive: true }), window.addEventListener("wheel", this.mousewheelListener);
          var e3 = this.editor.container.parentNode, t2 = [];
          while (e3)
            t2.push(e3), e3.addEventListener("scroll", this.onLayoutChange, { passive: true }), e3 = e3.parentNode;
          this.$elements = t2;
        }, e2.prototype.unObserveLayoutChanges = function() {
          var e3 = this;
          window.removeEventListener("resize", this.onLayoutChange, { passive: true }), window.removeEventListener("wheel", this.mousewheelListener), this.$elements && this.$elements.forEach(function(t2) {
            t2.removeEventListener("scroll", e3.onLayoutChange, { passive: true });
          }), this.$elements = null;
        }, e2.prototype.onLayoutChange = function() {
          if (!this.popup.isOpen)
            return this.unObserveLayoutChanges();
          this.$updatePopupPosition(), this.updateDocTooltip();
        }, e2.prototype.$updatePopupPosition = function() {
          var e3 = this.editor, t2 = e3.renderer, n2 = t2.layerConfig.lineHeight, r2 = t2.$cursorLayer.getPixelPosition(this.base, true);
          r2.left -= this.popup.getTextLeftOffset();
          var i2 = e3.container.getBoundingClientRect();
          r2.top += i2.top - t2.layerConfig.offset, r2.left += i2.left - e3.renderer.scrollLeft, r2.left += t2.gutterWidth;
          var s2 = { top: r2.top, left: r2.left };
          t2.$ghostText && t2.$ghostTextWidget && this.base.row === t2.$ghostText.position.row && (s2.top += t2.$ghostTextWidget.el.offsetHeight);
          var o2 = e3.container.getBoundingClientRect().bottom - n2, u2 = o2 < s2.top ? { top: o2, left: s2.left } : s2;
          if (this.popup.tryShow(u2, n2, "bottom"))
            return;
          if (this.popup.tryShow(r2, n2, "top"))
            return;
          this.popup.show(r2, n2);
        }, e2.prototype.openPopup = function(e3, t2, n2) {
          this.$firstOpenTimer.cancel(), this.popup || this.$init(), this.inlineEnabled && !this.inlineRenderer && this.$initInline(), this.popup.autoSelect = this.autoSelect, this.popup.setSelectOnHover(this.setSelectOnHover);
          var r2 = this.popup.getRow(), i2 = this.popup.data[r2];
          this.popup.setData(this.completions.filtered, this.completions.filterText), this.editor.textInput.setAriaOptions && this.editor.textInput.setAriaOptions({ activeDescendant: o(this.popup.getRow()), inline: this.inlineEnabled }), e3.keyBinding.addKeyboardHandler(this.keyboardHandler);
          var s2;
          this.stickySelection && (s2 = this.popup.data.indexOf(i2));
          if (!s2 || s2 === -1)
            s2 = 0;
          this.popup.setRow(this.autoSelect ? s2 : -1), s2 === r2 && i2 !== this.completions.filtered[s2] && this.$onPopupChange();
          var u2 = this.inlineRenderer && this.inlineEnabled;
          if (s2 === r2 && u2) {
            var a2 = this.popup.getData(this.popup.getRow());
            this.$updateGhostText(a2);
          }
          n2 || (this.popup.setTheme(e3.getTheme()), this.popup.setFontSize(e3.getFontSize()), this.$updatePopupPosition(), this.tooltipNode && this.updateDocTooltip()), this.changeTimer.cancel(), this.observeLayoutChanges();
        }, e2.prototype.detach = function() {
          this.editor && (this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler), this.editor.off("changeSelection", this.changeListener), this.editor.off("blur", this.blurListener), this.editor.off("mousedown", this.mousedownListener), this.editor.off("mousewheel", this.mousewheelListener)), this.$firstOpenTimer.cancel(), this.changeTimer.cancel(), this.hideDocTooltip(), this.completionProvider && this.completionProvider.detach(), this.popup && this.popup.isOpen && this.popup.hide(), this.popup && this.popup.renderer && this.popup.renderer.off("afterRender", this.$onPopupRender), this.base && this.base.detach(), this.activated = false, this.completionProvider = this.completions = this.base = null, this.unObserveLayoutChanges();
        }, e2.prototype.changeListener = function(e3) {
          var t2 = this.editor.selection.lead;
          (t2.row != this.base.row || t2.column < this.base.column) && this.detach(), this.activated ? this.changeTimer.schedule() : this.detach();
        }, e2.prototype.blurListener = function(e3) {
          var t2 = document.activeElement, n2 = this.editor.textInput.getElement(), r2 = e3.relatedTarget && this.tooltipNode && this.tooltipNode.contains(e3.relatedTarget), i2 = this.popup && this.popup.container;
          t2 != n2 && t2.parentNode != i2 && !r2 && t2 != this.tooltipNode && e3.relatedTarget != n2 && this.detach();
        }, e2.prototype.mousedownListener = function(e3) {
          this.detach();
        }, e2.prototype.mousewheelListener = function(e3) {
          this.popup && !this.popup.isMouseOver && this.detach();
        }, e2.prototype.mouseOutListener = function(e3) {
          this.popup.isOpen && this.$updatePopupPosition();
        }, e2.prototype.goTo = function(e3) {
          this.popup.goTo(e3);
        }, e2.prototype.insertMatch = function(e3, t2) {
          e3 || (e3 = this.popup.getData(this.popup.getRow()));
          if (!e3)
            return false;
          if (e3.value === "")
            return this.detach();
          var n2 = this.completions, r2 = this.getCompletionProvider().insertMatch(this.editor, e3, n2.filterText, t2);
          return this.completions == n2 && this.detach(), r2;
        }, e2.prototype.showPopup = function(e3, t2) {
          this.editor && this.detach(), this.activated = true, this.editor = e3, e3.completer != this && (e3.completer && e3.completer.detach(), e3.completer = this), e3.on("changeSelection", this.changeListener), e3.on("blur", this.blurListener), e3.on("mousedown", this.mousedownListener), e3.on("mousewheel", this.mousewheelListener), this.updateCompletions(false, t2);
        }, e2.prototype.getCompletionProvider = function(e3) {
          return this.completionProvider || (this.completionProvider = new m(e3)), this.completionProvider;
        }, e2.prototype.gatherCompletions = function(e3, t2) {
          return this.getCompletionProvider().gatherCompletions(e3, t2);
        }, e2.prototype.updateCompletions = function(t2, n2) {
          if (t2 && this.base && this.completions) {
            var r2 = this.editor.getCursorPosition(), i2 = this.editor.session.getTextRange({ start: this.base, end: r2 });
            if (i2 == this.completions.filterText)
              return;
            this.completions.setFilter(i2);
            if (!this.completions.filtered.length)
              return this.detach();
            if (this.completions.filtered.length == 1 && this.completions.filtered[0].value == i2 && !this.completions.filtered[0].snippet)
              return this.detach();
            this.openPopup(this.editor, i2, t2);
            return;
          }
          if (n2 && n2.matches) {
            var r2 = this.editor.getSelectionRange().start;
            return this.base = this.editor.session.doc.createAnchor(r2.row, r2.column), this.base.$insertRight = true, this.completions = new g(n2.matches), this.getCompletionProvider().completions = this.completions, this.openPopup(this.editor, "", t2);
          }
          var s2 = this.editor.getSession(), r2 = this.editor.getCursorPosition(), i2 = u.getCompletionPrefix(this.editor);
          this.base = s2.doc.createAnchor(r2.row, r2.column - i2.length), this.base.$insertRight = true;
          var o2 = { exactMatch: this.exactMatch, ignoreCaption: this.ignoreCaption };
          this.getCompletionProvider({ prefix: i2, pos: r2 }).provideCompletions(this.editor, o2, (function(n3, r3, i3) {
            var s3 = r3.filtered, o3 = u.getCompletionPrefix(this.editor);
            this.$firstOpenTimer.cancel();
            if (i3) {
              if (!s3.length) {
                var a2 = !this.autoShown && this.emptyMessage;
                typeof a2 == "function" && (a2 = this.emptyMessage(o3));
                if (a2) {
                  var f2 = [{ caption: a2, value: "" }];
                  this.completions = new g(f2), this.openPopup(this.editor, o3, t2), this.popup.renderer.setStyle("ace_loading", false), this.popup.renderer.setStyle("ace_empty-message", true);
                  return;
                }
                return this.detach();
              }
              if (s3.length == 1 && s3[0].value == o3 && !s3[0].snippet)
                return this.detach();
              if (this.autoInsert && !this.autoShown && s3.length == 1)
                return this.insertMatch(s3[0]);
            }
            this.completions = !i3 && this.showLoadingState ? new g(e2.completionsForLoading.concat(s3), r3.filterText) : r3, this.openPopup(this.editor, o3, t2), this.popup.renderer.setStyle("ace_empty-message", false), this.popup.renderer.setStyle("ace_loading", !i3);
          }).bind(this)), this.showLoadingState && !this.autoShown && (!this.popup || !this.popup.isOpen) && this.$firstOpenTimer.delay(this.stickySelectionDelay / 2);
        }, e2.prototype.cancelContextMenu = function() {
          this.editor.$mouseHandler.cancelContextMenu();
        }, e2.prototype.updateDocTooltip = function() {
          var e3 = this.popup, t2 = this.completions.filtered, n2 = t2 && (t2[e3.getHoveredRow()] || t2[e3.getRow()]), r2 = null;
          if (!n2 || !this.editor || !this.popup.isOpen)
            return this.hideDocTooltip();
          var i2 = this.editor.completers.length;
          for (var s2 = 0; s2 < i2; s2++) {
            var o2 = this.editor.completers[s2];
            if (o2.getDocTooltip && n2.completerId === o2.id) {
              r2 = o2.getDocTooltip(n2);
              break;
            }
          }
          !r2 && typeof n2 != "string" && (r2 = n2), typeof r2 == "string" && (r2 = { docText: r2 });
          if (!r2 || !r2.docHTML && !r2.docText)
            return this.hideDocTooltip();
          this.showDocTooltip(r2);
        }, e2.prototype.showDocTooltip = function(e3) {
          this.tooltipNode || (this.tooltipNode = f.createElement("div"), this.tooltipNode.style.margin = "0", this.tooltipNode.style.pointerEvents = "auto", this.tooltipNode.style.overscrollBehavior = "contain", this.tooltipNode.tabIndex = -1, this.tooltipNode.onblur = this.blurListener.bind(this), this.tooltipNode.onclick = this.onTooltipClick.bind(this), this.tooltipNode.id = "doc-tooltip", this.tooltipNode.setAttribute("role", "tooltip"), this.tooltipNode.addEventListener("wheel", p));
          var t2 = this.editor.renderer.theme;
          this.tooltipNode.className = "ace_tooltip ace_doc-tooltip " + (t2.isDark ? "ace_dark " : "") + (t2.cssClass || "");
          var n2 = this.tooltipNode;
          e3.docHTML ? n2.innerHTML = e3.docHTML : e3.docText && (n2.textContent = e3.docText), n2.parentNode || this.popup.container.appendChild(this.tooltipNode);
          var r2 = this.popup, i2 = r2.container.getBoundingClientRect();
          n2.style.top = r2.container.style.top, n2.style.bottom = r2.container.style.bottom, n2.style.display = "block", window.innerWidth - i2.right < 320 ? i2.left < 320 ? r2.isTopdown ? (n2.style.top = i2.bottom + "px", n2.style.left = i2.left + "px", n2.style.right = "", n2.style.bottom = "") : (n2.style.top = r2.container.offsetTop - n2.offsetHeight + "px", n2.style.left = i2.left + "px", n2.style.right = "", n2.style.bottom = "") : (n2.style.right = window.innerWidth - i2.left + "px", n2.style.left = "") : (n2.style.left = i2.right + 1 + "px", n2.style.right = "");
        }, e2.prototype.hideDocTooltip = function() {
          this.tooltipTimer.cancel();
          if (!this.tooltipNode)
            return;
          var e3 = this.tooltipNode;
          !this.editor.isFocused() && document.activeElement == e3 && this.editor.focus(), this.tooltipNode = null, e3.parentNode && e3.parentNode.removeChild(e3);
        }, e2.prototype.onTooltipClick = function(e3) {
          var t2 = e3.target;
          while (t2 && t2 != this.tooltipNode) {
            if (t2.nodeName == "A" && t2.href) {
              t2.rel = "noreferrer", t2.target = "_blank";
              break;
            }
            t2 = t2.parentNode;
          }
        }, e2.prototype.destroy = function() {
          this.detach();
          if (this.popup) {
            this.popup.destroy();
            var e3 = this.popup.container;
            e3 && e3.parentNode && e3.parentNode.removeChild(e3);
          }
          this.editor && this.editor.completer == this && (this.editor.off("destroy", d), this.editor.completer = null), this.inlineRenderer = this.popup = this.editor = null;
        }, e2.for = function(t2) {
          return t2.completer instanceof e2 ? t2.completer : (t2.completer && (t2.completer.destroy(), t2.completer = null), c.get("sharedPopups") ? (e2.$sharedInstance || (e2.$sharedInstance = new e2()), t2.completer = e2.$sharedInstance) : (t2.completer = new e2(), t2.once("destroy", d)), t2.completer);
        }, e2;
      }();
      v.prototype.commands = { Up: function(e2) {
        e2.completer.goTo("up");
      }, Down: function(e2) {
        e2.completer.goTo("down");
      }, "Ctrl-Up|Ctrl-Home": function(e2) {
        e2.completer.goTo("start");
      }, "Ctrl-Down|Ctrl-End": function(e2) {
        e2.completer.goTo("end");
      }, Esc: function(e2) {
        e2.completer.detach();
      }, Return: function(e2) {
        return e2.completer.insertMatch();
      }, "Shift-Return": function(e2) {
        e2.completer.insertMatch(null, { deleteSuffix: true });
      }, Tab: function(e2) {
        var t2 = e2.completer.insertMatch();
        if (!!t2 || !!e2.tabstopManager)
          return t2;
        e2.completer.goTo("down");
      }, Backspace: function(e2) {
        e2.execCommand("backspace");
        var t2 = u.getCompletionPrefix(e2);
        !t2 && e2.completer && e2.completer.detach();
      }, PageUp: function(e2) {
        e2.completer.popup.gotoPageUp();
      }, PageDown: function(e2) {
        e2.completer.popup.gotoPageDown();
      } }, v.startCommand = { name: "startAutocomplete", exec: function(e2, t2) {
        var n2 = v.for(e2);
        n2.autoInsert = false, n2.autoSelect = true, n2.autoShown = false, n2.showPopup(e2, t2), n2.cancelContextMenu();
      }, bindKey: "Ctrl-Space|Ctrl-Shift-Space|Alt-Space" };
      var m = function() {
        function e2(e3) {
          this.initialPosition = e3, this.active = true;
        }
        return e2.prototype.insertByIndex = function(e3, t2, n2) {
          return !this.completions || !this.completions.filtered ? false : this.insertMatch(e3, this.completions.filtered[t2], n2);
        }, e2.prototype.insertMatch = function(e3, t2, n2) {
          if (!t2)
            return false;
          e3.startOperation({ command: { name: "insertMatch" } });
          if (t2.completer && t2.completer.insertMatch)
            t2.completer.insertMatch(e3, t2);
          else {
            if (!this.completions)
              return false;
            var r2 = this.completions.filterText.length, i2 = 0;
            t2.range && t2.range.start.row === t2.range.end.row && (r2 -= this.initialPosition.prefix.length, r2 += this.initialPosition.pos.column - t2.range.start.column, i2 += t2.range.end.column - this.initialPosition.pos.column);
            if (r2 || i2) {
              var s2;
              e3.selection.getAllRanges ? s2 = e3.selection.getAllRanges() : s2 = [e3.getSelectionRange()];
              for (var o2 = 0, u2; u2 = s2[o2]; o2++)
                u2.start.column -= r2, u2.end.column += i2, e3.session.remove(u2);
            }
            t2.snippet ? l.insertSnippet(e3, t2.snippet) : this.$insertString(e3, t2), t2.completer && t2.completer.onInsert && typeof t2.completer.onInsert == "function" && t2.completer.onInsert(e3, t2), t2.command && t2.command === "startAutocomplete" && e3.execCommand(t2.command);
          }
          return e3.endOperation(), true;
        }, e2.prototype.$insertString = function(e3, t2) {
          var n2 = t2.value || t2;
          e3.execCommand("insertstring", n2);
        }, e2.prototype.gatherCompletions = function(e3, t2) {
          var n2 = e3.getSession(), r2 = e3.getCursorPosition(), i2 = u.getCompletionPrefix(e3), s2 = [];
          this.completers = e3.completers;
          var o2 = e3.completers.length;
          return e3.completers.forEach(function(a2, f2) {
            a2.getCompletions(e3, n2, r2, i2, function(n3, r3) {
              a2.hideInlinePreview && (r3 = r3.map(function(e4) {
                return Object.assign(e4, { hideInlinePreview: a2.hideInlinePreview });
              })), !n3 && r3 && (s2 = s2.concat(r3)), t2(null, { prefix: u.getCompletionPrefix(e3), matches: s2, finished: --o2 === 0 });
            });
          }), true;
        }, e2.prototype.provideCompletions = function(e3, t2, n2) {
          var r2 = (function(e4) {
            var r3 = e4.prefix, i3 = e4.matches;
            this.completions = new g(i3), t2.exactMatch && (this.completions.exactMatch = true), t2.ignoreCaption && (this.completions.ignoreCaption = true), this.completions.setFilter(r3), (e4.finished || this.completions.filtered.length) && n2(null, this.completions, e4.finished);
          }).bind(this), i2 = true, s2 = null;
          this.gatherCompletions(e3, (function(e4, t3) {
            if (!this.active)
              return;
            e4 && (n2(e4, [], true), this.detach());
            var o3 = t3.prefix;
            if (o3.indexOf(t3.prefix) !== 0)
              return;
            if (i2) {
              s2 = t3;
              return;
            }
            r2(t3);
          }).bind(this)), i2 = false;
          if (s2) {
            var o2 = s2;
            s2 = null, r2(o2);
          }
        }, e2.prototype.detach = function() {
          this.active = false, this.completers && this.completers.forEach(function(e3) {
            typeof e3.cancel == "function" && e3.cancel();
          });
        }, e2;
      }(), g = function() {
        function e2(e3, t2) {
          this.all = e3, this.filtered = e3, this.filterText = t2 || "", this.exactMatch = false, this.ignoreCaption = false;
        }
        return e2.prototype.setFilter = function(e3) {
          if (e3.length > this.filterText && e3.lastIndexOf(this.filterText, 0) === 0)
            var t2 = this.filtered;
          else
            var t2 = this.all;
          this.filterText = e3, t2 = this.filterCompletions(t2, this.filterText), t2 = t2.sort(function(e4, t3) {
            return t3.exactMatch - e4.exactMatch || t3.$score - e4.$score || (e4.caption || e4.value).localeCompare(t3.caption || t3.value);
          });
          var n2 = null;
          t2 = t2.filter(function(e4) {
            var t3 = e4.snippet || e4.caption || e4.value;
            return t3 === n2 ? false : (n2 = t3, true);
          }), this.filtered = t2;
        }, e2.prototype.filterCompletions = function(e3, t2) {
          var n2 = [], r2 = t2.toUpperCase(), i2 = t2.toLowerCase();
          e:
            for (var s2 = 0, o2; o2 = e3[s2]; s2++) {
              if (o2.skipFilter) {
                n2.push(o2);
                continue;
              }
              var u2 = !this.ignoreCaption && o2.caption || o2.value || o2.snippet;
              if (!u2)
                continue;
              var a2 = -1, f2 = 0, l2 = 0, c2, h2;
              if (this.exactMatch) {
                if (t2 !== u2.substr(0, t2.length))
                  continue e;
              } else {
                var p2 = u2.toLowerCase().indexOf(i2);
                if (p2 > -1)
                  l2 = p2;
                else
                  for (var d2 = 0; d2 < t2.length; d2++) {
                    var v2 = u2.indexOf(i2[d2], a2 + 1), m2 = u2.indexOf(r2[d2], a2 + 1);
                    c2 = v2 >= 0 ? m2 < 0 || v2 < m2 ? v2 : m2 : m2;
                    if (c2 < 0)
                      continue e;
                    h2 = c2 - a2 - 1, h2 > 0 && (a2 === -1 && (l2 += 10), l2 += h2, f2 |= 1 << d2), a2 = c2;
                  }
              }
              o2.matchMask = f2, o2.exactMatch = l2 ? 0 : 1, o2.$score = (o2.score || 0) - l2, n2.push(o2);
            }
          return n2;
        }, e2;
      }();
      t.Autocomplete = v, t.CompletionProvider = m, t.FilteredList = g;
    }), ace.define("ace/autocomplete/text_completer", ["require", "exports", "module", "ace/range"], function(e, t, n) {
      function s(e2, t2) {
        var n2 = e2.getTextRange(r.fromPoints({ row: 0, column: 0 }, t2));
        return n2.split(i).length - 1;
      }
      function o(e2, t2) {
        var n2 = s(e2, t2), r2 = e2.getValue().split(i), o2 = /* @__PURE__ */ Object.create(null), u = r2[n2];
        return r2.forEach(function(e3, t3) {
          if (!e3 || e3 === u)
            return;
          var i2 = Math.abs(n2 - t3), s2 = r2.length - i2;
          o2[e3] ? o2[e3] = Math.max(s2, o2[e3]) : o2[e3] = s2;
        }), o2;
      }
      var r = e("../range").Range, i = /[^a-zA-Z_0-9\$\-\u00C0-\u1FFF\u2C00-\uD7FF\w]+/;
      t.getCompletions = function(e2, t2, n2, r2, i2) {
        var s2 = o(t2, n2), u = Object.keys(s2);
        i2(null, u.map(function(e3) {
          return { caption: e3, value: e3, score: s2[e3], meta: "local" };
        }));
      };
    }), ace.define("ace/ext/language_tools", ["require", "exports", "module", "ace/snippets", "ace/autocomplete", "ace/config", "ace/lib/lang", "ace/autocomplete/util", "ace/autocomplete/text_completer", "ace/editor", "ace/config"], function(e, t, n) {
      "use strict";
      var r = e("../snippets").snippetManager, i = e("../autocomplete").Autocomplete, s = e("../config"), o = e("../lib/lang"), u = e("../autocomplete/util"), a = e("../autocomplete/text_completer"), f = { getCompletions: function(e2, t2, n2, r2, i2) {
        if (t2.$mode.completer)
          return t2.$mode.completer.getCompletions(e2, t2, n2, r2, i2);
        var s2 = e2.session.getState(n2.row), o2 = t2.$mode.getCompletions(s2, t2, n2, r2);
        o2 = o2.map(function(e3) {
          return e3.completerId = f.id, e3;
        }), i2(null, o2);
      }, id: "keywordCompleter" }, l = function(e2) {
        var t2 = {};
        return e2.replace(/\${(\d+)(:(.*?))?}/g, function(e3, n2, r2, i2) {
          return t2[n2] = i2 || "";
        }).replace(/\$(\d+?)/g, function(e3, n2) {
          return t2[n2];
        });
      }, c = { getCompletions: function(e2, t2, n2, i2, s2) {
        var o2 = [], u2 = t2.getTokenAt(n2.row, n2.column);
        u2 && u2.type.match(/(tag-name|tag-open|tag-whitespace|attribute-name|attribute-value)\.xml$/) ? o2.push("html-tag") : o2 = r.getActiveScopes(e2);
        var a2 = r.snippetMap, f2 = [];
        o2.forEach(function(e3) {
          var t3 = a2[e3] || [];
          for (var n3 = t3.length; n3--; ) {
            var r2 = t3[n3], i3 = r2.name || r2.tabTrigger;
            if (!i3)
              continue;
            f2.push({ caption: i3, snippet: r2.content, meta: r2.tabTrigger && !r2.name ? r2.tabTrigger + "⇥ " : "snippet", completerId: c.id });
          }
        }, this), s2(null, f2);
      }, getDocTooltip: function(e2) {
        e2.snippet && !e2.docHTML && (e2.docHTML = ["<b>", o.escapeHTML(e2.caption), "</b>", "<hr></hr>", o.escapeHTML(l(e2.snippet))].join(""));
      }, id: "snippetCompleter" }, h = [c, a, f];
      t.setCompleters = function(e2) {
        h.length = 0, e2 && h.push.apply(h, e2);
      }, t.addCompleter = function(e2) {
        h.push(e2);
      }, t.textCompleter = a, t.keyWordCompleter = f, t.snippetCompleter = c;
      var p = { name: "expandSnippet", exec: function(e2) {
        return r.expandWithTab(e2);
      }, bindKey: "Tab" }, d = function(e2, t2) {
        v(t2.session.$mode);
      }, v = function(e2) {
        typeof e2 == "string" && (e2 = s.$modes[e2]);
        if (!e2)
          return;
        r.files || (r.files = {}), m(e2.$id, e2.snippetFileId), e2.modes && e2.modes.forEach(v);
      }, m = function(e2, t2) {
        if (!t2 || !e2 || r.files[e2])
          return;
        r.files[e2] = {}, s.loadModule(t2, function(t3) {
          if (!t3)
            return;
          r.files[e2] = t3, !t3.snippets && t3.snippetText && (t3.snippets = r.parseSnippetFile(t3.snippetText)), r.register(t3.snippets || [], t3.scope), t3.includeScopes && (r.snippetMap[t3.scope].includeScopes = t3.includeScopes, t3.includeScopes.forEach(function(e3) {
            v("ace/mode/" + e3);
          }));
        });
      }, g = function(e2) {
        var t2 = e2.editor, n2 = t2.completer && t2.completer.activated;
        if (e2.command.name === "backspace")
          n2 && !u.getCompletionPrefix(t2) && t2.completer.detach();
        else if (e2.command.name === "insertstring" && !n2) {
          y = e2;
          var r2 = e2.editor.$liveAutocompletionDelay;
          r2 ? b.delay(r2) : w(e2);
        }
      }, y, b = o.delayedCall(function() {
        w(y);
      }, 0), w = function(e2) {
        var t2 = e2.editor, n2 = u.getCompletionPrefix(t2), r2 = e2.args, s2 = u.triggerAutocomplete(t2, r2);
        if (n2 && n2.length >= t2.$liveAutocompletionThreshold || s2) {
          var o2 = i.for(t2);
          o2.autoShown = true, o2.showPopup(t2);
        }
      }, E = e("../editor").Editor;
      e("../config").defineOptions(E.prototype, "editor", { enableBasicAutocompletion: { set: function(e2) {
        e2 ? (this.completers || (this.completers = Array.isArray(e2) ? e2 : h), this.commands.addCommand(i.startCommand)) : this.commands.removeCommand(i.startCommand);
      }, value: false }, enableLiveAutocompletion: { set: function(e2) {
        e2 ? (this.completers || (this.completers = Array.isArray(e2) ? e2 : h), this.commands.on("afterExec", g)) : this.commands.off("afterExec", g);
      }, value: false }, liveAutocompletionDelay: { initialValue: 0 }, liveAutocompletionThreshold: { initialValue: 0 }, enableSnippets: { set: function(e2) {
        e2 ? (this.commands.addCommand(p), this.on("changeMode", d), d(null, this)) : (this.commands.removeCommand(p), this.off("changeMode", d));
      }, value: false } });
    });
    (function() {
      ace.require(["ace/ext/language_tools"], function(m) {
        if (typeof module == "object" && typeof exports == "object" && module) {
          module.exports = m;
        }
      });
    })();
  }
});
export default require_ext_language_tools();
//# sourceMappingURL=ace-builds_src-min-noconflict_ext-language_tools.js.map
