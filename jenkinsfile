pipeline {
    agent {
        docker {
            image 'node:18-bullseye'
            args '-u root'
            reuseNode true
        }
    }
    
    environment {
        AZURE_SERVICE_PRINCIPAL_ID     = credentials('azure-sp-client-id')
        AZURE_SERVICE_PRINCIPAL_SECRET = credentials('azure-sp-client-secret')
        AZURE_TENANT_ID                = credentials('azure-sp-tenant-id')
        AZURE_SUBSCRIPTION_ID          = credentials('azure-subscription-id')
        STORAGE_ACCOUNT_NAME           = 'awonefrontendstatic12312'
        BUILD_DIR                     = 'dist'
    }
    
    stages {
        stage('Prepare Workspace') {
            steps {
                sh '''
                    echo "Creating fresh workspace..."
                    # Create a temporary directory for our work
                    mkdir -p /tmp/jenkins-build
                    cd /tmp/jenkins-build
                    
                    # Clone the repository fresh
                    git clone https://github.com/Vishal-1807/platform-llm-updated.git .
                    git checkout dev
                    
                    echo "Workspace prepared successfully"
                    ls -la
                '''
                dir('/tmp/jenkins-build') {
                    // All subsequent steps will run in this directory
                    script {
                        env.WORKSPACE = '/tmp/jenkins-build'
                    }
                }
            }
        }
        
        stage('Install Azure CLI') {
            steps {
                dir(env.WORKSPACE) {
                    echo 'Installing Azure CLI'
                    sh '''
                        apt-get update
                        apt-get install -y curl gnupg lsb-release
                        curl -sL https://aka.ms/InstallAzureCLIDeb | bash
                        az --version
                    '''
                }
            }
        }
        
        stage('Fix Case Sensitivity') {
            steps {
                dir(env.WORKSPACE) {
                    sh '''
                        cd src/components/Tabular/Experiment/Deploy/Endpoint/
                        ln -sf Endpoint.css EndPoint.css 2>/dev/null || true
                    '''
                }
            }
        }
        
        stage('Build') {
            steps {
                dir(env.WORKSPACE) {
                    sh '''
                        npm install
                        npm run build
                        echo "Build completed. Dist folder:"
                        ls -la dist/
                    '''
                }
            }
        }

        stage('Deploy to Azure Storage') {
            steps {
                dir(env.WORKSPACE) {
                    script {
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'azure-sp-client-id',
                                usernameVariable: 'AZURE_CLIENT_ID',
                                passwordVariable: 'AZURE_CLIENT_SECRET'
                            )
                        ]) {
                            sh """
                                az login --service-principal \
                                    -u ${AZURE_SERVICE_PRINCIPAL_ID} \
                                    -p ${AZURE_SERVICE_PRINCIPAL_SECRET} \
                                    --tenant ${AZURE_TENANT_ID}
                                
                                az account set --subscription ${AZURE_SUBSCRIPTION_ID}
                                
                                az storage blob upload-batch \
                                    --account-name ${STORAGE_ACCOUNT_NAME} \
                                    --destination '\$web' \
                                    --source ${BUILD_DIR} \
                                    --overwrite
                            """
                        }
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                sh '''
                    echo "Cleaning up temporary workspace..."
                    rm -rf /tmp/jenkins-build || true
                '''
            }
        }
    }
}
